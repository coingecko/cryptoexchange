quit
JSON.parse(raw_output.to_s.gsub("=>",":"))quit
JSON.parse(raw_output.to_s.gsub("=>",":"))
JSON.parse(raw_output.gsub("=>",":"))
JSON.parse(raw_output.gsub("=>",":")
JSON.parse("#{raw_output}")
raw_output
raw_output.to_json
n
c
quit
JSON.parse(raw_output)
raw_output
n
c
quit
JSON.parse(raw_output)
JSON.parse(raw_outpu)
raw_output
n
c
n
quit
raw_output
JSON.parse(raw_output)
n
c
n
HTTP.get(PAIRS_URL)
c
quit
HTTP.get(PAIRS_URL)
c
n
c
n
c
n
c
n
N
Cryptoexchange::Exchanges::Upbit::Market::PAIRS_URL
c
ticker_output.push(volume_output)
c
quit
qui
[ticker_output, volume_output]
c
quit
[ticker_output, volume_output]
volume_output
n
volume_output
n
quit
{volume: volume}
c
output.count
volume
output
volume
quit
c
n
ticker["candleAccTradeVolume"]
ticker
quit
buy_sell_output[0]["pair"]
buy_sell_output[0]["pair"}
buy_sell_output.flatten["pair"]
buy_sell_output[:pair]
buy_sell_output["pair"]
buy_sell_output
ohlc_output
n
BUY_SELL.flatten.select{ |pair| pair["pair"] == "#{market_pair.base}:#{market_pair.target}"}
n
quit
BUY_SELL.flatten
BUY_SELL
BUY_SELL.select{ |pair| pair["pair"] == "#{market_pair.base}:#{market_pair.target}"}
n
c
n
quit
BUY_SELL[0].select{ |pair| pair["pair"] == "#{market_pair.base}:#{market_pair.target}"}
BUY_SELL[0].select{ |pair| pair}
BUY_SELL.select{ |pair| pair}
BUY_SELL
pair["pair"]
BUY_SELL.select{ |pair| pair["pair"] == "#{market_pair.base}:#{market_pair.target}"}
market_pair
n
c
n
BUY_SELL
BUY_SELL.empty?
n
quit
ohlc_output
quit
market_pair
output[1]
output
quit
output
c
n
JSON.parse(output)
n
quit
JSON.parse(output)
output = HTTP.post(ticker_url, :body => "{\"pair\":\"btc:usd\"}")
JSON.parse(output)
  output = HTTP.post(ticker_url, :body => "{'pair':'btc:usd'}")
JSON.parse(output)
output = HTTP.post(ticker_url, :body => "'pair':'btc:usd'")
JSON.parse(output)
n
quit
HTTP.post(ticker_url, :body => "pair"+":"+"#{pair_combined}")
JSON.parse(output)
output
n
quit
JSON.parse(output)
output
n
c
n
c
n
quit
one = JSON.parse(test)
test = HTTP.post("https://api.bitflip.cc/method/market.getOHLC", :body => '{"pair":"USD:EUR"}')
one = JSON.parse(test)
test = HTTP.post("https://api.bitflip.cc/method/market.getOHLC", :body => 'pair:"#{market_pair.base.downcase}:#{market_pair.target.downcase}"')
require JSON
HTTP.post("https://api.bitflip.cc/method/market.getOHLC", :body => 'pair:"#{market_pair.base.downcase}:#{market_pair.target.downcase}"')
HTTP.post("https://api.bitflip.cc/method/market.getOHLC", :body => {'pair:"#{market_pair.base.downcase}:#{market_pair.target.downcase}"'})
HTTP.post("https://api.bitflip.cc/method/market.getOHLC", :body => {"pair": "#{market_pair.base.downcase}:#{market_pair.target.downcase}"})
HTTP.post(ticker_url, :body => {"pair": "#{market_pair.base.downcase}:#{market_pair.target.downcase}"})
market_pair
output = HTTP.post(ticker_url, :body => {"pair": "#{market_pair.base.downcase}:#{market_pair.target.downcase}"})
c
market_pairs
quit
target
base
base,target = pair["pair"].split(':')
split = pair["pair"].split(':')
pair
quit
output
